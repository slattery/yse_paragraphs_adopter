<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeTypeInterface;

function yse_paragraphs_adopter_node_presave(EntityInterface $parent_node) {
  \Drupal::service('yse_paragraphs_adopter.collector')->adopt_paragraphs_from_node($parent_node);
}

function yse_paragraphs_adopter_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  // Adds paragraph type grouping to the form.
  /** @var Drupal\node\NodeTypeInterface $node_type */
  $node_type = $form_state->getFormObject()->getEntity();
  $form['adopt_embedded_paragraphs'] = [
    '#type' => 'checkbox',
    '#title' => t('Adopt Embedded Parapraphs from WYSIWYG'),
    '#default_value' => $node_type->getThirdPartySetting('yse_paragraphs_adopter', 'adopt_embedded_paragraphs', FALSE),
  ];
  $form['#entity_builders'][] = 'yse_paragraphs_adopter_form_node_type_form_builder';

}

// Should we simplify this to just deal with the thirdpartysetting and do the rest in presave?
// Not sure if need and would have the same protection to avoid running twice in presave.
function yse_paragraphs_adopter_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {

   //take care of the third party setting first.
   if ($form_state->isValueEmpty('adopt_embedded_paragraphs'){
        $type->unsetThirdPartySetting('yse_paragraphs_adopter', 'include_promoter_target_bundles');
   }
   else {
    $type->setThirdPartySetting('yse_paragraphs_adopter', 'adopt_embedded_paragraphs', $form_state->getValue('adopt_embedded_paragraphs'));
   }
}

function yse_paragraphs_adopter_node_type_presave(NodeTypeInterface $node_type){
  //That should be set above in the form builder.
  if ($node_type->getThirdPartySetting('yse_paragraphs_adopter', 'adopt_embedded_paragraphs', FALSE)){
    //TODO: Might check for existing field and take action or hide it.
    return;
  }
  //if the field is there, no further action is needed as long as we don't take action above.
  $bundle_field_definition = \Drupal::service('yse_paragraphs_adopter.collector')->entityFieldManager->getFieldDefinitions('node', $node_type->id())['field_embedded_paragraphs'];
  if (isset($bundle_field_definition)){
    return;
  }

  //This assumes that the definition exists from the module install process.
  $storage_definition = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions('node')['field_embedded_paragraphs'];
  $adopter_definition = FieldDefinition::createFromFieldStorageDefinition($storage_definition)
    ->setTargetBundle($node_type->id())
    ->setProvider('yse_paragraphs_adopter')
    ->setDescription(t('This field is where WYSIWYG embeds are parked so they are not orphaned.'))
    ->setDisplayOptions('view', ['region' => 'hidden'])
    ->setDisplayConfigurable('view', FALSE)
    ->setDisplayOptions('form', [
      'type' => 'paragraphs',
      'settings' => [
        'display_label' => TRUE,
        'title' =>  'Paragraph',
        'title_plural'  =>  'Paragraphs',
        'edit_mode'  =>  'closed',
        'closed_mode'  =>  'summary',
        'autocollapse'  =>  'none',
        'closed_mode_threshold'  =>  '0',
        'add_mode'  =>  'dropdown',
        'form_display_mode'  =>  'default',
        'default_paragraph_type'  =>  '_none',
      ],
      'weight' => 100,
    ])
    ->setCardinality(-1)
    ->setDisplayConfigurable('form', TRUE);

  \Drupal::service('field_definition.listener')->onFieldDefinitionCreate($adopter_definition);
  \Drupal::service('entity_field.manager')->clearCachedFieldDefinitions();
}






